service cloud.firestore {
  match /databases/{database}/documents {
    function auth() {
      return request.auth != null;
    }

    match /fridgeAuths/{fridgeID} {
      function isOwner() {
        return request.auth.uid == resource.data.ownerID;
      }
      function isNewOwner() {
        return request.auth.uid == request.resource.data.ownerID;
      }
      function canRead() {
        return isOwner() || request.auth.uid in resource.data.users;
      }
      function canCreate() {
        return isNewOwner() && exists(/databases/$(database)/documents/fridges/$(fridgeID))
      }
      function canUpdate() {
        return isOwner() || request.auth.uid == resource.data.ownerID;
      }
      function canDelete() {
        return isOwner();
      }

      allow read: if auth() && canRead();
      allow create: if auth() && canCreate();
      allow update: if auth() && canUpdate();
      allow delete: if auth() && canDelete();
    }

    match /fridges/{fridgeID} {
      function getAuth() {
        return get(/databases/$(database)/documents/fridgeAuths/$(fridgeID)).data;
      }
      function isAuthExisted(data) {
        return request.auth.uid in data.users;
      }
      function isOwner(data) {
        return data.users[request.auth.uid].type == 'owner';
      }
      function canRead(data) {
        return isAuthExisted(data) && isOwner(data);
      }
      function canCreate() {
        return !exists(/databases/$(database)/documents/fridgeAuths/$(fridgeID));
      }
      function canUpdate(data) {
        return isAuthExisted(data) && isOwner(data);
      }
      function canDelete() {
        return !exists(/databases/$(database)/documents/fridgeAuths/$(fridgeID));
      }

      allow read: if auth() && canRead(getAuth());
      allow create: if auth() && canCreate();
      allow update: if auth() && canUpdate(getAuth());
      allow delete: if auth() && canDelete();

      match /{document=**} {
        function canCreate(data) {
          return isAuthExisted(data) && isOwner(data);
        }
        function canDelete(data) {
          return isAuthExisted(data) && isOwner(data);
        }

        allow read: if auth() && canRead(getAuth());
        allow create: if auth() && canCreate(getAuth());
        allow update: if auth() && canUpdate(getAuth());
        allow delete: if auth() && canDelete(getAuth());
      }
    }

    match /publicFridges/{document=**} {
      allow read, write: if true;
    }
  }
}
